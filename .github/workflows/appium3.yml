name: Appium CI
 
on: 
  push:
  workflow_dispatch:
 
permissions:
  contents: read
  checks: write
  actions: write
 
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api-level: [34]
 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
 
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
 
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'
 
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
 
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
 
      - name: Configure Environment Variables
        run: |
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "AVD_HOME=$HOME/.android/avd" >> $GITHUB_ENV
          echo "$ANDROID_HOME/tools/bin" >> $GITHUB_PATH
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
 
      - name: Verify System State
        run: |
          echo "System Information:"
          free -h
          df -h
          echo "Android SDK Location: $ANDROID_HOME"
          echo "Java Location: $JAVA_HOME"
          ls -la $ANDROID_HOME
 
      - name: Install Android Dependencies
        run: |
          sdkmanager --install \
            "platform-tools" \
            "platforms;android-${{ matrix.api-level }}" \
            "system-images;android-${{ matrix.api-level }};google_apis_playstore;arm64-v8a" \
            "build-tools;34.0.0" \
            "emulator"
          yes | sdkmanager --licenses
 
      - name: Setup AVD Environment
        run: |
          mkdir -p $HOME/.android/avd
          chmod -R 777 $HOME/.android/avd
          echo "AVD directory created at: $HOME/.android/avd"
          ls -la $HOME/.android/avd
 
      - name: Create and Verify AVD
        run: |
          echo "Creating AVD..."
          echo "no" | avdmanager --verbose create avd \
            --name "test" \
            --package "system-images;android-${{ matrix.api-level }};google_apis_playstore;arm64-v8a" \
            --device "pixel" \
            --force
          echo "Verifying AVD creation..."
          avdmanager list avd
          ls -la $HOME/.android/avd/
 
      - name: Start Android Emulator
        run: |
          echo "Starting emulator..."
          nohup $ANDROID_HOME/emulator/emulator \
            -avd test \
            -no-snapshot \
            -no-audio \
            -no-window \
            -gpu swiftshader_indirect \
            -no-boot-anim \
            -verbose \
            -cores 2 \
            -memory 2048 &
 
          echo "Waiting for device..."
          adb wait-for-device
          echo "Waiting for boot completion..."
          timeout 300 adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done'
          echo "Configuring emulator settings..."
          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0
          adb shell settings put global animator_duration_scale 0
          echo "Emulator Status:"
          adb devices
 
      - name: Setup and Start Appium
        run: |
          echo "Installing Appium..."
          npm install -g appium
          echo "Installing Appium driver..."
          appium driver install uiautomator2
          echo "Starting Appium server..."
          nohup appium &
          sleep 10
          echo "Appium version:"
          appium --version
 
      - name: Run Tests
        run: |
          echo "Running tests..."
          dotnet test --logger "trx;LogFileName=TestResults.trx"
          if [ $? -ne 0 ]; then
            echo "Test execution failed"
            exit 1
          fi
 
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: "**/TestResults.trx"
          retention-days: 30
 
      - name: Cleanup Resources
        if: always()
        run: |
          echo "Stopping emulator..."
          adb emu kill || true
          echo "Stopping Appium..."
          pkill -f appium || true
          echo "Cleanup complete"
