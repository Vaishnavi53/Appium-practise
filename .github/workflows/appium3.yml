name: Appium CI
 
on: 

  push:

  workflow_dispatch:
 
permissions:

  contents: read

  checks: write

  actions: write
 
jobs:

  build:

    runs-on: ubuntu-latest

    strategy:

      matrix:

        api-level: [34]
 
    steps:

      - name: Checkout Repository

        uses: actions/checkout@v4
 
      - name: Set up JDK 11

        uses: actions/setup-java@v3

        with:

          distribution: 'zulu'

          java-version: '11'

          java-package: 'jdk+fx'
 
      - name: Set up .NET

        uses: actions/setup-dotnet@v3

        with:

          dotnet-version: '8.0'
 
      - name: Set up Node.js

        uses: actions/setup-node@v4

        with:

          node-version: '18'
 
      - name: Install Required Dependencies

        run: |

          sudo apt-get update

          sudo apt-get install -y libjaxb-java wget unzip
 
      - name: Setup Android SDK

        run: |

          export ANDROID_HOME=$HOME/android-sdk

          mkdir -p $ANDROID_HOME/cmdline-tools

          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV

          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip

          unzip commandlinetools-linux-9477386_latest.zip

          mv cmdline-tools $ANDROID_HOME/cmdline-tools/latest

          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin

          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH

          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
 
      - name: Install Android SDK Packages

        run: |

          yes | sdkmanager --licenses

          sdkmanager --verbose \

            "platform-tools" \

            "platforms;android-${{ matrix.api-level }}" \

            "system-images;android-${{ matrix.api-level }};google_apis_playstore;arm64-v8a" \

            "build-tools;34.0.0" \

            "emulator"
 
      - name: Create AVD

        run: |

          echo "Creating AVD..."

          avdmanager create avd \

            --name "test" \

            --package "system-images;android-${{ matrix.api-level }};google_apis_playstore;arm64-v8a" \

            --device "pixel" \

            --force
 
          echo "Verifying AVD..."

          avdmanager list avd
 
      - name: Start Android Emulator

        run: |

          echo "Starting emulator..."

          nohup $ANDROID_HOME/emulator/emulator \

            -avd test \

            -no-audio \

            -no-window \

            -gpu swiftshader_indirect \

            -no-snapshot \

            -no-boot-anim \

            -camera-back none \

            -camera-front none &

          echo "Waiting for emulator..."

          adb wait-for-device

          echo "Waiting for boot completion..."

          timeout 300 adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done'

          adb shell input keyevent 82

          adb shell settings put global window_animation_scale 0

          adb shell settings put global transition_animation_scale 0

          adb shell settings put global animator_duration_scale 0
 
      - name: Install and Start Appium

        run: |

          npm install -g appium

          appium driver install uiautomator2

          nohup appium &

          sleep 10
 
      - name: Run Tests

        run: |

          dotnet test --logger "trx;LogFileName=TestResults.trx"

          test_exit_code=$?

          if [ $test_exit_code -ne 0 ]; then

            echo "Tests failed with exit code $test_exit_code"

            exit $test_exit_code

          fi
 
      - name: Upload Test Results

        if: always()

        uses: actions/upload-artifact@v4

        with:

          name: test-results

          path: "**/TestResults.trx"

          retention-days: 30
 
      - name: Cleanup

        if: always()

        run: |

          adb emu kill || true

          pkill -f appium || true
 
